#!/usr/bin/env python3

from crazyflie_py import Crazyswarm
from rclpy.node import Node
from crazyflie_interfaces.srv import Land
from std_srvs.srv import Empty

class BatteryMonitor(Node):
    def __init__(self):
        super().__init__('battery_monitor')

        self.swarm = Crazyswarm()

        # Ensure Crazyflies are detected
        if not self.swarm.allcfs.crazyflies:
            self.get_logger().error("No Crazyflies detected. Ensure they are powered on and connected.")
            return

        self.battery_threshold = 3.8 #V

        #create timer to check on battery level every second
        self.create_timer(1.0, self.check_battery)
    
    def check_battery(self):
        """
        Check on the battery level every second and does something when it's too low
        """
        for cf in self.swarm.allcfs.crazyflies:
            voltage = cf.get_status().get('battery', None)
            if voltage is not None:
                self.get_logger().info(f"Battery voltage for {cf.cfname}: {voltage}")

            else:
                self.get_logger().warn(f"Battery level unavailable for {cf.cfname}")

def main():
    import rclpy
    rclpy.init()

    battery_monitor = BatteryMonitor()

    try:
        rclpy.spin(battery_monitor)
    except KeyboardInterrupt:
        battery_monitor.get_logger().info("Shuting down battery monitor...")
    finally:
        battery_monitor.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()